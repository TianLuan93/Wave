# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'bo.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import QApplication, QMainWindow,QVBoxLayout
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FC


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(867, 552)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(424, 102, 190, 16))
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(104, 128, 641, 301))
        self.widget.setObjectName("widget")
        self.fig = plt.figure(figsize=(10, 4), dpi=80)
        self.canvas = FC(self.fig)
        # 添加第一个图
        self.ax = self.fig.add_subplot('131')
        self.ax.set_title('sin')
        # 添加第二个图
        self.ax1 = self.fig.add_subplot('132')
        self.ax1.set_title('suqare')
        self.ax2 = self.fig.add_subplot('133')
        self.ax2.set_title('triangle')

        self.gridLayout_2 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_2.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.gridLayout_2.addWidget(self.canvas, 0, 0, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.widget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 2, 1, 1)
        self.lineEdit_2 = QtWidgets.QLineEdit(self.widget)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.gridLayout.addWidget(self.lineEdit_2, 0, 3, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 1, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout_2.addWidget(self.pushButton, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 867, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "图像生成"))
        self.label.setText(_translate("MainWindow", "频率"))
        self.label_2.setText(_translate("MainWindow", "幅度"))
        self.pushButton.setText(_translate("MainWindow", "生成图像"))

class MyWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.setupUi(self)
        self.pushButton.clicked.connect(self.onButtonClick)

    def onButtonClick(self):
        freq = float(self.lineEdit.text())
        amplitude = float(self.lineEdit_2.text())
        self.plot_sin(amplitude, freq)
        self.plot_square(amplitude, freq)
        self.plot_rec(amplitude,freq)
        self.canvas.draw()

    def plot_sin(self, A, f):
        x = np.arange(0, 4, 0.01)
        y = A * np.sin(2*np.pi*f*x)
        self.ax.plot(x, y)

    def plot_square(self, A, f):
        x = np.arange(0, 10, 0.01)
        y = 0
        for i in range(0, 20, 1):
            b = (-1) ** (i) * np.cos((2 * i + 1) * x) / (2 * i + 1)
            y = b + y
        self.ax1.plot(x, A * y)

    def plot_rec(self, A, f):
        t = np.linspace(-np.pi, np.pi, 201)
        k = np.arange(1, 99, 1/f)
        res = np.zeros_like(t)

        for i in range(len(t)):
            res[i] = np.sum(np.sin(2 * np.pi * k * t[i]) / k)

        res = (-2 / np.pi) * res * A
        self.ax2.plot(t, np.abs(res), lw=2.0)

app = QApplication(sys.argv)
myWin = MyWindow()
myWin.show()
sys.exit(app.exec_())